from django.db import models

#  These models generated by inspectdb utility
class Last(models.Model):
    username = models.CharField(primary_key=True, maxlength=750)
    seconds = models.TextField()
    state = models.TextField()
    class Meta:
        db_table = 'last'

class PrivacyDefaultList(models.Model):
    username = models.CharField(primary_key=True, maxlength=750)
    name = models.CharField(maxlength=750)
    class Meta:
        db_table = 'privacy_default_list'

class PrivacyList(models.Model):
    username = models.CharField(maxlength=750)
    name = models.CharField(unique=True, maxlength=750)
    class Meta:
        db_table = 'privacy_list'

class PrivacyListData(models.Model):
    t = models.TextField()
    value = models.TextField()
    action = models.TextField()
    ord = models.TextField() # This field type is a guess.
    match_all = models.IntegerField()
    match_iq = models.IntegerField()
    match_message = models.IntegerField()
    match_presence_in = models.IntegerField()
    match_presence_out = models.IntegerField()
    class Meta:
        db_table = 'privacy_list_data'

class PrivateStorage(models.Model):
    username = models.CharField(maxlength=750)
    namespace = models.CharField(unique=True, maxlength=750)
    data = models.TextField()
    class Meta:
        db_table = 'private_storage'

class Rostergroups(models.Model):
    username = models.CharField(maxlength=750)
    jid = models.CharField(maxlength=750)
    grp = models.TextField()
    class Meta:
        db_table = 'rostergroups'

class Rosterusers(models.Model):
    username = models.CharField(maxlength=750)
    jid = models.CharField(maxlength=750)
    nick = models.TextField()
    subscription = models.TextField()
    ask = models.TextField()
    askmessage = models.TextField()
    server = models.TextField()
    subscribe = models.TextField()
    type = models.TextField(blank=True)
    class Meta:
        db_table = 'rosterusers'

class Spool(models.Model):
    username = models.CharField(maxlength=750)
    xml = models.TextField()
    seq = models.IntegerField(unique=True)
    class Meta:
        db_table = 'spool'

class Users(models.Model):
    username = models.CharField(primary_key=True, maxlength=750)
    password = models.TextField()
    class Meta:
        db_table = 'users'

class Vcard(models.Model):
    username = models.CharField(primary_key=True, maxlength=750)
    vcard = models.TextField()
    class Meta:
        db_table = 'vcard'

class VcardSearch(models.Model):
    username = models.CharField(maxlength=750)
    lusername = models.CharField(primary_key=True, maxlength=750)
    fn = models.TextField()
    lfn = models.CharField(maxlength=750)
    family = models.TextField()
    lfamily = models.CharField(maxlength=750)
    given = models.TextField()
    lgiven = models.CharField(maxlength=750)
    middle = models.TextField()
    lmiddle = models.CharField(maxlength=750)
    nickname = models.TextField()
    lnickname = models.CharField(maxlength=750)
    bday = models.TextField()
    lbday = models.CharField(maxlength=750)
    ctry = models.TextField()
    lctry = models.CharField(maxlength=750)
    locality = models.TextField()
    llocality = models.CharField(maxlength=750)
    email = models.TextField()
    lemail = models.CharField(maxlength=750)
    orgname = models.TextField()
    lorgname = models.CharField(maxlength=750)
    orgunit = models.TextField()
    lorgunit = models.CharField(maxlength=750)
    class Meta:
        db_table = 'vcard_search'



# These models are for storing request results and have no connection with
# the database
class ServerStatus:
    def __init__(self,s_type,s_message,s_data):
        if s_type == "success" or s_type == "failure":
            self.type = s_type
            self.message = s_message
            self.data = s_data
        else:
            self.type = "failure"
            self.message = "Invalid ServerStatus.type value"
            self.data = None

